// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  EDITOR
  USER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  role      UserRole @default(USER)

  isActive        Boolean  @default(false) @map("is_active")
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime? @map("locked_until")
  lastLoginAt         DateTime? @map("last_login_at")

  isTwoFactorEnabled     Boolean @default(false) @map("is_two_factor_enabled")
  twoFactorSecret        String? @map("two_factor_secret")
  twoFactorRecoveryCodes String? @map("two_factor_recovery_codes")

  passwordChangedAt         DateTime  @default(now()) @map("password_changed_at")
  passwordExpiresAt         DateTime? @map("password_expires_at")
  lastPasswordExpiryWarning DateTime? @map("last_password_expiry_warning")
  forcePasswordChange       Boolean   @default(false) @map("force_password_change")

  verificationToken  VerificationToken?
  passwordResetToken PasswordResetToken?
  refreshToken       RefreshToken?

  @@index([email, passwordExpiresAt])
  @@map("users")
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique // Valeur du token
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@index([token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@index([token])
  @@map("password_reset_tokens")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  userAgent String?  @map("user_agent")
  ipAddress String?  @map("ip_address")
  isRevoked Boolean  @default(false) @map("is_revoked")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@index([token])
  @@map("refresh_tokens")
}

model EncryptionKey {
  id        String    @id @default(uuid())
  version   Int       @unique
  key       String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")

  @@map("encryption_keys")
}
